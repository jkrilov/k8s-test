name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run linting
      run: |
        uv run black --check src/ tests/
        uv run isort --check-only src/ tests/

    - name: Run tests
      run: uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run security scan
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json -s B104 || true
        uv run bandit -r src/ -s B104

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: k8s-test-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-app k8s-test-app:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ping || exit 1
        docker stop test-app

  kubernetes-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo cp kubeval /usr/local/bin

    - name: Validate Kubernetes manifests
      run: |
        # Validate core Kubernetes resources only
        kubeval k8s/deployment.yaml k8s/green-deployment.yaml || true
        
        # Use kubectl dry-run for more comprehensive validation
        kubectl apply --dry-run=client -f k8s/deployment.yaml
        kubectl apply --dry-run=client -f k8s/green-deployment.yaml
        kubectl apply --dry-run=client -f k8s/configmap.yaml
        
        # Skip monitoring.yaml as it contains CRDs that require Prometheus Operator

    - name: Validate with kustomize
      run: |
        # Create a temporary kustomization file for core resources
        cat <<EOF > kustomization.yaml
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        resources:
        - k8s/deployment.yaml
        - k8s/green-deployment.yaml
        - k8s/configmap.yaml
        EOF
        
        kubectl kustomize . > /tmp/core-manifests.yaml
        kubeval /tmp/core-manifests.yaml || true
        kubectl apply --dry-run=client -f /tmp/core-manifests.yaml
