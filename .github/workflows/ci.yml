name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run linting
      run: |
        uv run black --check src/ tests/
        uv run isort --check-only src/ tests/

    - name: Run tests
      run: uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run security scan
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json -s B104 || true
        uv run bandit -r src/ -s B104

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: k8s-test-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-app k8s-test-app:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ping || exit 1
        docker stop test-app

  kubernetes-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install validation tools
      run: |
        echo "Installing yq for YAML parsing..."
        sudo wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq

    - name: Validate YAML syntax and structure
      run: |
        echo "Validating YAML syntax and structure..."
        
        # Parse and validate YAML structure
        for file in k8s/*.yaml; do
          if [ -f "$file" ]; then
            echo "Validating $file..."
            
            # Check if file is valid YAML
            yq eval '.' "$file" > /dev/null || {
              echo "❌ $file is not valid YAML"
              exit 1
            }
            
            # Check required Kubernetes fields
            api_version=$(yq eval '.apiVersion // "missing"' "$file")
            kind=$(yq eval '.kind // "missing"' "$file")
            
            if [ "$api_version" = "missing" ] || [ "$kind" = "missing" ]; then
              echo "❌ $file is missing required apiVersion or kind"
              exit 1
            fi
            
            echo "✅ $file: $kind ($api_version)"
          fi
        done

    - name: Validate Kubernetes manifests (syntax only)
      run: |
        echo "Validating Kubernetes manifest syntax..."
        
        # Simple syntax validation without cluster connection
        for file in k8s/deployment.yaml k8s/green-deployment.yaml k8s/configmap.yaml; do
          if [ -f "$file" ]; then
            echo "Validating $file syntax..."
            
            # Check if it's valid YAML and has basic K8s structure
            if yq eval '.apiVersion' "$file" > /dev/null && yq eval '.kind' "$file" > /dev/null && yq eval '.metadata.name' "$file" > /dev/null; then
              echo "✅ $file has valid Kubernetes structure"
            else
              echo "❌ $file is missing required Kubernetes fields"
              exit 1
            fi
          fi
        done

    - name: Validate with kubeval (optional)
      run: |
        echo "Installing and running kubeval..."
        
        # Download kubeval
        wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo cp kubeval /usr/local/bin
        
        # Run kubeval with relaxed validation
        for file in k8s/deployment.yaml k8s/green-deployment.yaml k8s/configmap.yaml; do
          if [ -f "$file" ]; then
            echo "Running kubeval on $file..."
            kubeval --ignore-missing-schemas --skip-kinds=ServiceMonitor,PrometheusRule "$file" || {
              echo "⚠️ kubeval validation had issues with $file (possibly missing schemas)"
            }
          fi
        done
        
        echo "✅ Kubeval validation completed"
      continue-on-error: true
